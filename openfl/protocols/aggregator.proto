// Copyright (C) 2020-2023 Intel Corporation
// Licensed subject to the terms of the separately executed evaluation license agreement between Intel Corporation and you.

syntax = "proto3";

package openfl.aggregator;

import "openfl/protocols/base.proto";


service Aggregator {
  rpc GetTasks(GetTasksRequest) returns (GetTasksResponse) {}
  rpc GetAggregatedTensor(GetAggregatedTensorRequest) returns (GetAggregatedTensorResponse) {}
  rpc SendLocalTaskResults(stream DataStream) returns (SendLocalTaskResultsResponse) {}
  rpc GetMetricStream(GetMetricStreamRequest) returns (stream GetMetricStreamResponse) {}
  rpc GetTrainedModel(GetTrainedModelRequest) returns (TrainedModelResponse) {}
  rpc GetExperimentDescription(GetExperimentDescriptionRequest)
    returns (GetExperimentDescriptionResponse) {}
  rpc AddCollaborator(AddCollaboratorRequest) returns (AddCollaboratorResponse) {}
  rpc RemoveCollaborator(RemoveCollaboratorRequest) returns (RemoveCollaboratorResponse) {}
  rpc GetExperimentStatus(GetExperimentStatusRequest) returns (GetExperimentStatusResponse) {}
  rpc SetStragglerCuttoffTime(SetStragglerCuttoffTimeRequest) returns (SetStragglerCuttoffTimeResponse) {}
  rpc ConnectivityCheck(ConnectivityCheckRequest) returns (ConnectivityCheckResponse) {}
}

message MessageHeader {
  string sender = 1;
  string receiver = 2;
  string federation_uuid = 3;
  string single_col_cert_common_name = 4;
}

message GetTasksRequest {
  MessageHeader header = 1;
}

message Task {
  string name = 1;
  string function_name = 2;
  string task_type = 3;
  bool apply_local = 4;
}

message GetTasksResponse {
  MessageHeader header = 1;
  int32 round_number = 2;
  // these next three are exclusive. Oneof is probably a good idea
  repeated Task tasks = 3;  // these three are exclusive
  int32 sleep_time = 4;  // these three are exclusive
  bool quit = 5;  // these three are exclusive
}

message GetAggregatedTensorRequest {
  MessageHeader header = 1;
  string tensor_name = 2;
  int32 round_number = 3;
  bool report = 4;
  repeated string	tags = 5;
  bool require_lossless = 6;
}

// we'll actually send this as a data stream
message GetAggregatedTensorResponse {
  MessageHeader header = 1;
  int32 round_number = 2;
  NamedTensor tensor = 3;
}

// we'll actually send this as a data stream
message TaskResults {
  MessageHeader  header = 1;
  int32 round_number = 2;
  string task_name = 3;
  int32	data_size = 4;
  repeated NamedTensor tensors = 5;
}

message SendLocalTaskResultsResponse {
  MessageHeader header = 1;
}

// The same with director.proto
message GetMetricStreamRequest {
  string experiment_name = 1;
}

// The same with director.proto
message GetMetricStreamResponse {
  string metric_origin = 1;
  string task_name = 2;
  string metric_name = 3;
  float metric_value = 4;
  uint32 round = 5;
}

// The same with director.proto
message GetTrainedModelRequest {
  enum ModelType {
    BEST_MODEL = 0;
    LAST_MODEL = 1;
  }
  string experiment_name = 2;
  ModelType model_type = 3;
}

// The same with director.proto
message TrainedModelResponse {
  ModelProto model_proto = 1;
}

// The same with director.proto
message GetExperimentDescriptionRequest {
  string name = 1;
}

// The same with director.proto
message GetExperimentDescriptionResponse {
  ExperimentDescription experiment = 1;
}

message AddCollaboratorRequest {
  MessageHeader header = 1;
  string collaborator_label = 2;
  string collaborator_cn = 3;
}

message AddCollaboratorResponse {
  MessageHeader header = 1;
}

message RemoveCollaboratorRequest {
  MessageHeader header = 1;
  string collaborator_label = 2;
  string collaborator_cn = 3;
}

message RemoveCollaboratorResponse {
  MessageHeader header = 1;
}

message GetExperimentStatusRequest {
  MessageHeader header = 1;
}

message SetStragglerCuttoffTimeRequest {
  MessageHeader header = 1;
  float timeout_in_seconds = 2;
}

message TaskEndTime {
  string task_name = 1;
  float end_time = 2;
}

message CollaboratorProgress {
  string col_name = 1;
  optional float start_time = 2;
  repeated TaskEndTime tasks_end_time = 3;
}

message ExperimentStatus {
  uint32 round = 1;
  optional double round_start = 2;
  repeated CollaboratorProgress collaborators_progress = 3;
  repeated string stragglers = 4;
  repeated string to_add_next_round = 5;
  repeated string to_remove_next_round = 6;
  repeated string available_collaborators = 7;
  repeated string assigned_collaborators = 8;
}

message GetExperimentStatusResponse {
  MessageHeader header = 1;
  ExperimentStatus current_round = 2;
  optional ExperimentStatus previous_round = 3;
}

message SetStragglerCuttoffTimeResponse {
  MessageHeader header = 1;
}

message ConnectivityCheckRequest {
  MessageHeader header = 1;
}

message ConnectivityCheckResponse {
  MessageHeader header = 1;
}